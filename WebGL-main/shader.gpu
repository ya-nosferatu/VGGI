

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;

uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;

varying vec3 vNormal;
varying vec3 vPosition;

void main() {
    vPosition = vec3(ModelViewMatrix * vec4(vertex, 1.0));
    vNormal = normalize(NormalMatrix * normal);

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
uniform vec3 lightPosition;

varying vec3 vNormal;
varying vec3 vPosition;

void main() {
    vec3 lightDir = normalize(lightPosition - vPosition);
    float diffuse = max(dot(vNormal, lightDir), 0.0);

    vec3 diffuseColor = diffuse * vec3(1.0, 1.0, 0.0);  // Yellow light
    vec3 ambientColor = vec3(0.2, 0.2, 0.2);  // Gray ambient light

    gl_FragColor = vec4(ambientColor + diffuseColor, 1.0);
}`;